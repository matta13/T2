version: '3.9'

services:
  # ==========================================================
  # 1. BASE DE DATOS Y CACHÉ
  # ==========================================================
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/01_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
      - ./postgres/02_data.sql:/docker-entrypoint-initdb.d/02_data.sql   
    networks:
      - claudio

  redis_cache:
    image: redis:7-alpine
    container_name: redis_cache
    command: >
      redis-server
      --maxmemory 1mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    ports:
      - "6379:6379"
    networks:
      - claudio
    restart: unless-stopped
    volumes:
      - redis_data:/data 

  # ==========================================================
  # 2. INFRAESTRUCTURA DE MENSAJERÍA (KAFKA - MODO KRAFT)
  # ==========================================================
  kafka:
    image: 'bitnami/kafka:3.9.0'
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    volumes:
      - kafka-data:/bitnami/kafka 
    networks:
      - claudio

  # ==========================================================
  # 3. API PYTHON (FastAPI - qa_api/main.py)
  # ==========================================================
  qa_api:
    build: ./api 
    container_name: qa_api
    env_file:
      - .env.api
    networks:
      - claudio
    ports:
      - "8000:8000"
    restart: unless-stopped
    depends_on:
      kafka: 
        condition: service_started
      postgres:
        condition: service_started
      redis_cache:
        condition: service_started
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

  # ==========================================================
  # 4. TRABAJADOR LLM 
  # ==========================================================
  llm_worker:
    build:
      context: .
      dockerfile: kafka/Dockerfile.worker
    container_name: llm_worker
    restart: unless-stopped
    depends_on:
      kafka: 
        condition: service_started
      postgres:
        condition: service_started
      redis_cache:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092 
      KAFKA_INPUT_TOPIC: llm_requests
      KAFKA_DLQ_TOPIC: llm_dlq
      KAFKA_RESPONSES_TOPIC: llm_responses
      GEMINI_API_KEY: "AIzaSyArJH-7E38lSqWtcaGKrUbkNaMFSDiIZTQ" 
      GEMINI_MODEL: gemini-2.5-flash
      POSTGRES_HOST: postgres
      REDIS_HOST: redis_cache
    networks:
      - claudio
    command: ["python", "llm_worker.py"]

  # ==========================================================
  # 5. INFRAESTRUCTURA FLINK
  # ==========================================================
  jobmanager:
    build: .
    image: pyflink/pyflink:1.16.0-scala_2.12
    volumes:
      - .:/opt/pyflink-walkthrough
    hostname: "jobmanager"
    expose:
      - "6123"
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - claudio

  taskmanager:
    image: pyflink/pyflink:1.16.0-scala_2.12
    volumes:
    - .:/opt/pyflink-walkthrough
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jobmanager
    command: taskmanager
    links:
      - jobmanager:jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - claudio
  
  # ==========================================================
  # 6. JOB FLINK
  # ==========================================================
  flink_quality_job:
    build:
      context: ./flink 
      dockerfile: Dockerfile.flink 
    container_name: flink_quality_job
    restart: "no"
    depends_on:
      taskmanager:
        condition: service_started
      jobmanager:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092 
      KAFKA_INPUT_TOPIC: llm_responses
      KAFKA_OUTPUT_TOPIC: validation_results
      JAVA_TOOL_OPTIONS: -Djdk.lang.ClassLoader.allowArraySyntax=true --add-opens=java.base/java.lang=ALL-UNNAMED
    networks:
      - claudio
    command: 
      - /bin/bash
      - -c
      - |
        echo "=== Verificando archivos antes de ejecutar ==="
        ls -la /opt/flink/lib/*kafka*
        echo "=== Ejecutando job Flink ==="
        /opt/flink/bin/flink run -py /opt/flink/opt/flink-job/qa.py

  # ==========================================================
  # 7. CLIENTE PYTHON (qa_client/client.py)
  # ==========================================================
  qa_client:
    build: ./client
    container_name: qa_client
    environment:
      - API_URL=http://qa_api:8000/ask
    networks:
      - claudio
    stdin_open: true
    tty: true
    restart: "no"
    depends_on:
      qa_api:
        condition: service_started

volumes:
  kafka-data:
  postgres_data:
  redis_data:

networks:
  claudio:
    external: true